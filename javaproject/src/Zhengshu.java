public class Zhengshu {
    public static void main(String[] args){
        int a = 10;
        System.out.println(a);
        int b = 10 << 1;
        System.out.println(b);
        /* 左移，整体向左移动n位
        * 00001010 1*2^3+1*2^1
        * 00010100 1*2^4+1*2^2
        *
        * 在 Java 中，右移运算符（>>）用于实现这种移动。右移运算符会将操作数的所有位向右移动指定的位数，并用符号位（最高位）进行填充。对于正数，向右移动时用 0 填充；对于负数，向右移动时用 1 填充。
        * */

        // 如果参与运算的两个数类型不一致，那么计算结果为较大类型的整型
        short s = 1234;
        int v = 123456;
        int m = s + v;
        System.out.println(m);

        // 强制转换
        int i = 1233;
        short z = (short) i;
        System.out.println(z);
        // 要注意，超出范围的强制转型会得到错误的结果，原因是转型时，int的两个高位字节直接被扔掉，仅保留了低位的两个字节
        int i1 = 1234567;
        short s1 = (short) i1; // -10617
        System.out.println(s1);
        int i2 = 12345678;
        short s2 = (short) i2; // 24910
        System.out.println(s2);

        int n = 100;
        int sum = 0;
        for (int j = 0; j <= n; j++) {
            sum += j;
        }
        System.out.println(sum);

        /**
         * 在二进制中，小数部分可以通过将十进制小数乘以 2 并逐步取整来表示。这是一个类似于十进制中将小数乘以 10 并逐步取整的过程，只是在二进制中，每一位的权重是 2 的幂次方。
         *
         * 下面是一个将十进制小数转换为二进制的示例过程：
         *
         * 假设我们要将十进制小数 0.375 转换为二进制：
         *
         * 1. 将小数部分乘以 2，得到 0.375 * 2 = 0.75。此时整数部分为 0，小数部分为 0.75。
         * 2. 取出整数部分 0，记录在二进制的小数部分，得到 0.0。小数部分更新为 0.75。
         * 3. 再次将小数部分乘以 2，得到 0.75 * 2 = 1.5。此时整数部分为 1，小数部分为 0.5。
         * 4. 取出整数部分 1，记录在二进制的小数部分，得到 0.01。小数部分更新为 0.5。
         * 5. 再次将小数部分乘以 2，得到 0.5 * 2 = 1。此时整数部分为 1，小数部分为 0。
         * 6. 取出整数部分 1，记录在二进制的小数部分，得到 0.011。小数部分更新为 0。
         *
         * 所以，0.375 的二进制表示为 0.011。
         *
         * 这个过程类似于在十进制中将小数转换为分数的过程，只不过换成了以 2 为底的二进制。
         */

        int age = 7;
        boolean isPrimary = age > 6 && age < 12 ? true : false;
        System.out.println(isPrimary);
    }
}